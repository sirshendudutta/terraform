{{- if and (eq.Values.ingress "enabled") (eq.Values.fntend "disabled") (eq.Values.mtls "disabled") }}
apiversion: networking.k8s.io/v1
kind: Ingress
metadata:
name: {{Values.projectName | quote }}
labels:
app: {{.Values.projectName | quote }}
annotations:
nginx.ingress.kubernetes.io/backend-protocol: HTTP
nginx.ingress.kubernetes.io/whitelist-source-range: {{.Values.IP }}
nginx.ingress.kubernetes.io/rewrite-target: /$1
nginx.ingress.kubernetes.io/configuration-snippet: |

 more_clear_headers "Server";
{{- if (default Values.uploadlimit false)}}
nginx.ingress.kubernetes.io/proxy-body-size: {{ default "50m" .Values.uploadSize}}
nginx.org/client-max-body-size: ((default "50m" .Values.uploadSizeÂ }}
{{- end}}
{{if eq.Values.extendFrtendProxyTimeOut true }}
{{- end}}
nginx.ingress.kubernetes.io/proxy-send-timeout: {{default 300.Values.proxySendTimeout | quote })
nginx.ingress.kubernetes.io/proxy-read-timeouts (( default 300.Values.proxyReadTimeout | quote }}
nginx.ingress.kubernetes.io/proxy-connect-timeout: {{ default 300, Values.proxyConnectTimeout | quote }}
spec:
    ingressClassName: ((Values.group )}
rules:
host: {{Values.fqdn }}
http:
paths:
    path: /{{Values.projectName}}/(.*)
     pathType: Exact
    backend:
    service:    
        name: {{Values.projectName | quote }}   
        port:
            number: {{Values.applicationPort }}
  tls:            
secrethane: {{.Values.projectane)}-{{.Values.tls_secret }}
hosts:
    {{Values.fqdn }}

{{ end >>



